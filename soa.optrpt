Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.1.217 Build 20200306

Compiler options: -march=native -O3 -DNDEBUG -qopt-report=5 -qopt-report-phase=vec -fp-model=precise -ipo -o ausarbeitung

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../01_Original.cpp(115,3) inlined into ../01_Original.cpp(158,3)
   remark #15388: vectorization support: reference partikel.x[i] has aligned access   [ ../01_Original.cpp(116,5) ]
   remark #15388: vectorization support: reference partikel.y[i] has aligned access   [ ../01_Original.cpp(117,5) ]
   remark #15388: vectorization support: reference partikel.z[i] has aligned access   [ ../01_Original.cpp(118,5) ]
   remark #15388: vectorization support: reference partikel.vx[i] has aligned access   [ ../01_Original.cpp(119,5) ]
   remark #15388: vectorization support: reference partikel.vy[i] has aligned access   [ ../01_Original.cpp(120,5) ]
   remark #15388: vectorization support: reference partikel.vz[i] has aligned access   [ ../01_Original.cpp(121,5) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->x[i]>, stride is 6   [ ../01_Original.cpp(116,25) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->y[i]>, stride is 6   [ ../01_Original.cpp(117,25) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->z[i]>, stride is 6   [ ../01_Original.cpp(118,25) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->vx[i]>, stride is 6   [ ../01_Original.cpp(119,26) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->vy[i]>, stride is 6   [ ../01_Original.cpp(120,26) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->vz[i]>, stride is 6   [ ../01_Original.cpp(121,26) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 6 
   remark #15452: unmasked strided loads: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 27 
   remark #15477: vector cost: 15.000 
   remark #15478: estimated potential speedup: 1.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at ../01_Original.cpp(115,14) inlined into ../01_Original.cpp(177,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../01_Original.cpp(115,3) inlined into ../01_Original.cpp(177,5)
      remark #15388: vectorization support: reference partikel.x[i] has aligned access   [ ../01_Original.cpp(116,5) ]
      remark #15388: vectorization support: reference partikel.y[i] has aligned access   [ ../01_Original.cpp(117,5) ]
      remark #15388: vectorization support: reference partikel.z[i] has aligned access   [ ../01_Original.cpp(118,5) ]
      remark #15388: vectorization support: reference partikel.vx[i] has aligned access   [ ../01_Original.cpp(119,5) ]
      remark #15388: vectorization support: reference partikel.vy[i] has aligned access   [ ../01_Original.cpp(120,5) ]
      remark #15388: vectorization support: reference partikel.vz[i] has aligned access   [ ../01_Original.cpp(121,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->x[i]>, stride is 6   [ ../01_Original.cpp(116,25) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->y[i]>, stride is 6   [ ../01_Original.cpp(117,25) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->z[i]>, stride is 6   [ ../01_Original.cpp(118,25) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->vx[i]>, stride is 6   [ ../01_Original.cpp(119,26) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->vy[i]>, stride is 6   [ ../01_Original.cpp(120,26) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->vz[i]>, stride is 6   [ ../01_Original.cpp(121,26) ]
      remark #15305: vectorization support: vector length 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 6 
      remark #15452: unmasked strided loads: 6 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 27 
      remark #15477: vector cost: 15.000 
      remark #15478: estimated potential speedup: 1.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../MoveParticles.cpp(90,3) inlined into ../01_Original.cpp(180,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../MoveParticles.cpp(99,5) inlined into ../01_Original.cpp(180,5)
         remark #15388: vectorization support: reference partikel.x[j] has aligned access   [ ../MoveParticles.cpp(107,24) ]
         remark #15388: vectorization support: reference partikel.y[j] has aligned access   [ ../MoveParticles.cpp(108,24) ]
         remark #15388: vectorization support: reference partikel.z[j] has aligned access   [ ../MoveParticles.cpp(109,24) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.691
         remark #15355: vectorization support: Fx is float type reduction   [ ../MoveParticles.cpp(93,14) ]
         remark #15355: vectorization support: Fy is float type reduction   [ ../MoveParticles.cpp(93,22) ]
         remark #15355: vectorization support: Fz is float type reduction   [ ../MoveParticles.cpp(93,30) ]
         remark #15301: SIMD LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 3 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 122 
         remark #15477: vector cost: 17.000 
         remark #15478: estimated potential speedup: 7.170 
         remark #15486: divides: 1 
         remark #15488: --- end vector cost summary ---
      LOOP END
   LOOP END

   LOOP BEGIN at ../MoveParticles.cpp(133,3) inlined into ../01_Original.cpp(180,5)
      remark #15388: vectorization support: reference partikel.x[i] has aligned access   [ ../MoveParticles.cpp(134,5) ]
      remark #15388: vectorization support: reference partikel.x[i] has aligned access   [ ../MoveParticles.cpp(134,5) ]
      remark #15388: vectorization support: reference partikel.vx[i] has aligned access   [ ../MoveParticles.cpp(134,23) ]
      remark #15388: vectorization support: reference partikel.y[i] has aligned access   [ ../MoveParticles.cpp(135,5) ]
      remark #15388: vectorization support: reference partikel.y[i] has aligned access   [ ../MoveParticles.cpp(135,5) ]
      remark #15388: vectorization support: reference partikel.vy[i] has aligned access   [ ../MoveParticles.cpp(135,23) ]
      remark #15388: vectorization support: reference partikel.z[i] has aligned access   [ ../MoveParticles.cpp(136,5) ]
      remark #15388: vectorization support: reference partikel.z[i] has aligned access   [ ../MoveParticles.cpp(136,5) ]
      remark #15388: vectorization support: reference partikel.vz[i] has aligned access   [ ../MoveParticles.cpp(136,23) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 6 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 2.620 
      remark #15478: estimated potential speedup: 11.040 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../01_Original.cpp(103,3) inlined into ../01_Original.cpp(187,7)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <reference_particles->x[i]>, stride is 6   [ ../01_Original.cpp(104,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->x[i]>, stride is 6   [ ../01_Original.cpp(104,25) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <reference_particles->y[i]>, stride is 6   [ ../01_Original.cpp(105,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->y[i]>, stride is 6   [ ../01_Original.cpp(105,25) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <reference_particles->z[i]>, stride is 6   [ ../01_Original.cpp(106,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->z[i]>, stride is 6   [ ../01_Original.cpp(106,25) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <reference_particles->vx[i]>, stride is 6   [ ../01_Original.cpp(107,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->vx[i]>, stride is 6   [ ../01_Original.cpp(107,26) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <reference_particles->vy[i]>, stride is 6   [ ../01_Original.cpp(108,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->vy[i]>, stride is 6   [ ../01_Original.cpp(108,26) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <reference_particles->vz[i]>, stride is 6   [ ../01_Original.cpp(109,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <partikel_start->vz[i]>, stride is 6   [ ../01_Original.cpp(109,26) ]
      remark #15305: vectorization support: vector length 2
      remark #15452: unmasked strided loads: 6 
      remark #15453: unmasked strided stores: 6 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 27 
      remark #15477: vector cost: 37.000 
      remark #15478: estimated potential speedup: 0.720 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../MoveParticles.cpp(32,3) inlined into ../01_Original.cpp(188,7)
      remark #15382: vectorization support: call to function pow(double, double) throw() cannot be vectorized   [ ../MoveParticles.cpp(50,31) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:pow(double, double) throw() (50:31) and call:pow(double, double) throw() (50:31)
      remark #15346: vector dependence: assumed OUTPUT dependence between call:pow(double, double) throw() (50:31) and call:pow(double, double) throw() (50:31)

      LOOP BEGIN at ../MoveParticles.cpp(38,5) inlined into ../01_Original.cpp(188,7)
         remark #15382: vectorization support: call to function pow(double, double) throw() cannot be vectorized   [ ../MoveParticles.cpp(50,31) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between Fx (53:7) and Fx (53:7)
         remark #15346: vector dependence: assumed FLOW dependence between Fx (53:7) and Fx (53:7)
         remark #15346: vector dependence: assumed FLOW dependence between Fx (53:7) and Fx (53:7)
         remark #15346: vector dependence: assumed ANTI dependence between Fx (53:7) and Fx (53:7)
      LOOP END
   LOOP END

   LOOP BEGIN at ../MoveParticles.cpp(66,3) inlined into ../01_Original.cpp(188,7)
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <reference_particles->x[i]>, stride is 6   [ ../MoveParticles.cpp(67,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <reference_particles->x[i]>, stride is 6   [ ../MoveParticles.cpp(67,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <reference_particles->vx[i]>, stride is 6   [ ../MoveParticles.cpp(67,22) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <reference_particles->y[i]>, stride is 6   [ ../MoveParticles.cpp(68,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <reference_particles->y[i]>, stride is 6   [ ../MoveParticles.cpp(68,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <reference_particles->vy[i]>, stride is 6   [ ../MoveParticles.cpp(68,22) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <reference_particles->z[i]>, stride is 6   [ ../MoveParticles.cpp(69,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <reference_particles->z[i]>, stride is 6   [ ../MoveParticles.cpp(69,5) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <reference_particles->vz[i]>, stride is 6   [ ../MoveParticles.cpp(69,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15452: unmasked strided loads: 6 
      remark #15453: unmasked strided stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 21.000 
      remark #15478: estimated potential speedup: 1.380 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at ../01_Original.cpp(127,3) inlined into ../01_Original.cpp(189,7)
      remark #15388: vectorization support: reference partikel.x[i] has aligned access   [ ../01_Original.cpp(128,25) ]
      remark #15388: vectorization support: reference partikel.y[i] has aligned access   [ ../01_Original.cpp(129,25) ]
      remark #15388: vectorization support: reference partikel.z[i] has aligned access   [ ../01_Original.cpp(130,25) ]
      remark #15388: vectorization support: reference partikel.vx[i] has aligned access   [ ../01_Original.cpp(131,26) ]
      remark #15388: vectorization support: reference partikel.vy[i] has aligned access   [ ../01_Original.cpp(132,26) ]
      remark #15388: vectorization support: reference partikel.vz[i] has aligned access   [ ../01_Original.cpp(133,26) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <opt_particles->x[i]>, stride is 6   [ ../01_Original.cpp(128,5) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <opt_particles->y[i]>, stride is 6   [ ../01_Original.cpp(129,5) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <opt_particles->z[i]>, stride is 6   [ ../01_Original.cpp(130,5) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <opt_particles->vx[i]>, stride is 6   [ ../01_Original.cpp(131,5) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <opt_particles->vy[i]>, stride is 6   [ ../01_Original.cpp(132,5) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <opt_particles->vz[i]>, stride is 6   [ ../01_Original.cpp(133,5) ]
      remark #15305: vectorization support: vector length 8
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 6 
      remark #15453: unmasked strided stores: 6 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 27 
      remark #15477: vector cost: 15.000 
      remark #15478: estimated potential speedup: 1.800 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at ../01_Original.cpp(217,3)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ../01_Original.cpp(218,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

../MoveParticles.cpp(79:3)::main:  Assume directive not useful: removing

Assume directive not useful: removing

Assume directive not useful: removing

Assume directive not useful: removing

Assume directive not useful: removing

Assume directive not useful: removing

Assume directive not useful: removing

Assume directive not useful: removing

===========================================================================

Begin optimization report for: test_result(Particle *, Particle *, Particle *, int, float) noexcept

    Report from: Vector optimizations [vec]



Non-optimizable loops:


LOOP BEGIN at ../01_Original.cpp(29,3)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END
===========================================================================

Begin optimization report for: initParticles(Particle *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ../01_Original.cpp(91,3)
   remark #15382: vectorization support: call to function rand() throw() cannot be vectorized   [ ../01_Original.cpp(92,27) ]
   remark #15382: vectorization support: call to function rand() throw() cannot be vectorized   [ ../01_Original.cpp(93,27) ]
   remark #15382: vectorization support: call to function rand() throw() cannot be vectorized   [ ../01_Original.cpp(94,27) ]
   remark #15382: vectorization support: call to function rand() throw() cannot be vectorized   [ ../01_Original.cpp(95,28) ]
   remark #15382: vectorization support: call to function rand() throw() cannot be vectorized   [ ../01_Original.cpp(96,28) ]
   remark #15382: vectorization support: call to function rand() throw() cannot be vectorized   [ ../01_Original.cpp(97,28) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand() throw() (92:27) and call:rand() throw() (97:28)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand() throw() (97:28) and call:rand() throw() (92:27)
LOOP END
===========================================================================
